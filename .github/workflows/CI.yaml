# SPDX-FileCopyrightText: 2022 Shun Sakai
#
# SPDX-License-Identifier: Apache-2.0 OR MIT

name: CI

on:
  push:
    branches:
      - 'develop'
      - 'master'
  pull_request:
  schedule:
      - cron: '0 0 * * 0'

jobs:
  package-test:
    name: Package Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        crate:
          - abcrypt
          - abcrypt-cli
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-12
          - target: x86_64-pc-windows-msvc
            os: windows-2022
          - crate: abcrypt
            msrv: 1.65.0
          - crate: abcrypt-cli
            msrv: 1.66.0
    steps:
    - name: Set Git to use LF
      if: matrix.os == 'windows-2022'
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.msrv }} # MSRV
        targets: ${{ matrix.target }}
    - name: Cache build artifacts
      uses: Swatinem/rust-cache@v2.6.2
      with:
        key: ${{ matrix.target }}
    - name: Run tests
      run: cargo test -p ${{ matrix.crate }} --target ${{ matrix.target }}
    - name: Run tests (all features)
      run: cargo test -p ${{ matrix.crate }} --target ${{ matrix.target }} --all-features
    - name: Run tests (no default features)
      run: cargo test -p ${{ matrix.crate }} --target ${{ matrix.target }} --no-default-features

  workspace-test:
    name: Workspace Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: x86_64-apple-darwin
            os: macos-12
          - target: x86_64-pc-windows-msvc
            os: windows-2022
    steps:
    - name: Set Git to use LF
      if: matrix.os == 'windows-2022'
      run: |
        git config --global core.autocrlf false
        git config --global core.eol lf
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: 1.66.0 # MSRV
        targets: ${{ matrix.target }}
    - name: Cache build artifacts
      uses: Swatinem/rust-cache@v2.6.2
      with:
        key: ${{ matrix.target }}
    - name: Run tests
      run: cargo test --target ${{ matrix.target }}
    - name: Run tests (all features)
      run: cargo test --target ${{ matrix.target }} --all-features
    - name: Run tests (no default features)
      run: cargo test --target ${{ matrix.target }} --no-default-features

  rustfmt:
    name: Rustfmt
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: rustfmt
    - name: Cache build artifacts
      uses: Swatinem/rust-cache@v2.6.2
    - name: Check code formatted
      run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: clippy
    - name: Cache build artifacts
      uses: Swatinem/rust-cache@v2.6.2
    - name: Check no lint warnings
      run: cargo clippy --workspace -- -D warnings
    - name: Check no lint warnings (all features)
      run: cargo clippy --workspace --all-features -- -D warnings
    - name: Check no lint warnings (no default features)
      run: cargo clippy --workspace --no-default-features -- -D warnings

  benchmark:
    name: Benchmark
    runs-on: ubuntu-22.04
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: nightly
    - name: Cache build artifacts
      uses: Swatinem/rust-cache@v2.6.2
    - name: Run benchmarks
      run: cargo bench -p abcrypt
    - name: Run benchmarks (all features)
      run: cargo bench -p abcrypt --all-features
    - name: Run benchmarks (no default features)
      run: cargo bench -p abcrypt --no-default-features
